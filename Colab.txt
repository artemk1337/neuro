from google.colab import drive
drive.mount('/gdrive')
%cd /gdriv

cp -r 'gdrive/My Drive/Colab Notebooks/Cat_dog' './' 
cd ../gdrive/My Drive/Colab Notebooks/Faces





import os
import shutil
import numpy as np
import matplotlib.pyplot as plt
import time
from keras import layers
from keras import models
from keras import optimizers

from keras.applications import VGG16
from keras.applications import VGG19
from keras.preprocessing import image
from keras.applications.mobilenet_v2 import MobileNetV2
from keras.preprocessing.image import ImageDataGenerator


def ploting():
    loss = history.history['loss']
    val_loss = history.history['val_loss']
    acc = history.history['acc']
    val_acc = history.history['val_acc']
    epochs = range(1, len(loss) + 1)
    fig = plt.figure()
    ax1 = fig.add_subplot(2, 1, 1)
    ax2 = fig.add_subplot(2, 1, 2)
    ax1.plot(epochs, loss, 'bo', label='Training loss')
    ax1.plot(epochs, val_loss, 'b', label='Validation loss', color='r')
    ax1.set_title('Training and validation loss')
    ax1.set_xlabel('Epochs')
    ax1.set_ylabel('Loss')
    ax1.legend()
    ax2.plot(epochs, acc, 'bo', label='Training acc')
    ax2.plot(epochs, val_acc, 'b', label='Validation acc', color='r')
    ax2.set_title('Training and validation accuracy')
    ax2.set_xlabel('Epochs')
    ax2.set_ylabel('Accuracy')
    ax2.legend()
    for ax in fig.axes:
        ax.grid(True)
    plt.show()


train_dir = 'train'
validation_dir = 'val'
test_dir = 'test'


conv_base = MobileNetV2(weights='imagenet', include_top=False, input_shape=(150, 150, 3))
batch_size = 20

train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=40, width_shift_range=0.2, height_shift_range=0.2,
                                   shear_range=0.2, horizontal_flip=True, fill_mode='nearest')
test_datagen = ImageDataGenerator(rescale=1./255)


train_generator = train_datagen.flow_from_directory(train_dir,
                                                    target_size=(150, 150),
                                                    batch_size=20,
                                                    class_mode='binary')
validation_generator = test_datagen.flow_from_directory(validation_dir,
                                                        target_size=(150, 150),
                                                        batch_size=20,
                                                        class_mode='binary')


model = models.Sequential()
model.add(conv_base)
model.add(layers.Flatten())
model.add(layers.Dense(256, activation='relu'))
# model.add(layers.Dropout(0.5, name='dropout_one'))
# model.add(layers.Dense(128, activation='relu'))
# model.add(layers.Dropout(0.5, name='dropout_two'))
model.add(layers.Dense(100, activation='softmax'))


model.compile(loss='sparse_categorical_crossentropy',
optimizer=optimizers.RMSprop(lr=100e-6),
metrics=['sparse_categorical_accuracy'])

history = model.fit_generator(
train_generator,
steps_per_epoch=100,
epochs=50,
validation_data=validation_generator,
validation_steps=50)


model.save('model_MobileNetV2_second.h5')
ploting()
print(f'\n{time.time() - a} - время работы\n')
